// Code generated by entc, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/callingpoint"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/day"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/platform"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/predicate"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/service"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/station"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/toc"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCallingPoint = "CallingPoint"
	TypeDay          = "Day"
	TypePlatform     = "Platform"
	TypeService      = "Service"
	TypeStation      = "Station"
	TypeTOC          = "TOC"
)

// CallingPointMutation represents an operation that mutates the CallingPoint nodes in the graph.
type CallingPointMutation struct {
	config
	op             Op
	typ            string
	id             *int
	arrival_time   *time.Time
	departure_time *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*CallingPoint, error)
	predicates     []predicate.CallingPoint
}

var _ ent.Mutation = (*CallingPointMutation)(nil)

// callingpointOption allows management of the mutation configuration using functional options.
type callingpointOption func(*CallingPointMutation)

// newCallingPointMutation creates new mutation for the CallingPoint entity.
func newCallingPointMutation(c config, op Op, opts ...callingpointOption) *CallingPointMutation {
	m := &CallingPointMutation{
		config:        c,
		op:            op,
		typ:           TypeCallingPoint,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCallingPointID sets the ID field of the mutation.
func withCallingPointID(id int) callingpointOption {
	return func(m *CallingPointMutation) {
		var (
			err   error
			once  sync.Once
			value *CallingPoint
		)
		m.oldValue = func(ctx context.Context) (*CallingPoint, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CallingPoint.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCallingPoint sets the old CallingPoint of the mutation.
func withCallingPoint(node *CallingPoint) callingpointOption {
	return func(m *CallingPointMutation) {
		m.oldValue = func(context.Context) (*CallingPoint, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CallingPointMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CallingPointMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CallingPointMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CallingPointMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CallingPoint.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetArrivalTime sets the "arrival_time" field.
func (m *CallingPointMutation) SetArrivalTime(t time.Time) {
	m.arrival_time = &t
}

// ArrivalTime returns the value of the "arrival_time" field in the mutation.
func (m *CallingPointMutation) ArrivalTime() (r time.Time, exists bool) {
	v := m.arrival_time
	if v == nil {
		return
	}
	return *v, true
}

// OldArrivalTime returns the old "arrival_time" field's value of the CallingPoint entity.
// If the CallingPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallingPointMutation) OldArrivalTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArrivalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArrivalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArrivalTime: %w", err)
	}
	return oldValue.ArrivalTime, nil
}

// ResetArrivalTime resets all changes to the "arrival_time" field.
func (m *CallingPointMutation) ResetArrivalTime() {
	m.arrival_time = nil
}

// SetDepartureTime sets the "departure_time" field.
func (m *CallingPointMutation) SetDepartureTime(t time.Time) {
	m.departure_time = &t
}

// DepartureTime returns the value of the "departure_time" field in the mutation.
func (m *CallingPointMutation) DepartureTime() (r time.Time, exists bool) {
	v := m.departure_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDepartureTime returns the old "departure_time" field's value of the CallingPoint entity.
// If the CallingPoint object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CallingPointMutation) OldDepartureTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDepartureTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDepartureTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDepartureTime: %w", err)
	}
	return oldValue.DepartureTime, nil
}

// ResetDepartureTime resets all changes to the "departure_time" field.
func (m *CallingPointMutation) ResetDepartureTime() {
	m.departure_time = nil
}

// Where appends a list predicates to the CallingPointMutation builder.
func (m *CallingPointMutation) Where(ps ...predicate.CallingPoint) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CallingPointMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CallingPoint).
func (m *CallingPointMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CallingPointMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.arrival_time != nil {
		fields = append(fields, callingpoint.FieldArrivalTime)
	}
	if m.departure_time != nil {
		fields = append(fields, callingpoint.FieldDepartureTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CallingPointMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case callingpoint.FieldArrivalTime:
		return m.ArrivalTime()
	case callingpoint.FieldDepartureTime:
		return m.DepartureTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CallingPointMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case callingpoint.FieldArrivalTime:
		return m.OldArrivalTime(ctx)
	case callingpoint.FieldDepartureTime:
		return m.OldDepartureTime(ctx)
	}
	return nil, fmt.Errorf("unknown CallingPoint field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallingPointMutation) SetField(name string, value ent.Value) error {
	switch name {
	case callingpoint.FieldArrivalTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArrivalTime(v)
		return nil
	case callingpoint.FieldDepartureTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDepartureTime(v)
		return nil
	}
	return fmt.Errorf("unknown CallingPoint field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CallingPointMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CallingPointMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CallingPointMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CallingPoint numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CallingPointMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CallingPointMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CallingPointMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CallingPoint nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CallingPointMutation) ResetField(name string) error {
	switch name {
	case callingpoint.FieldArrivalTime:
		m.ResetArrivalTime()
		return nil
	case callingpoint.FieldDepartureTime:
		m.ResetDepartureTime()
		return nil
	}
	return fmt.Errorf("unknown CallingPoint field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CallingPointMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CallingPointMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CallingPointMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CallingPointMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CallingPointMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CallingPointMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CallingPointMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CallingPoint unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CallingPointMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CallingPoint edge %s", name)
}

// DayMutation represents an operation that mutates the Day nodes in the graph.
type DayMutation struct {
	config
	op            Op
	typ           string
	id            *int
	date          *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Day, error)
	predicates    []predicate.Day
}

var _ ent.Mutation = (*DayMutation)(nil)

// dayOption allows management of the mutation configuration using functional options.
type dayOption func(*DayMutation)

// newDayMutation creates new mutation for the Day entity.
func newDayMutation(c config, op Op, opts ...dayOption) *DayMutation {
	m := &DayMutation{
		config:        c,
		op:            op,
		typ:           TypeDay,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDayID sets the ID field of the mutation.
func withDayID(id int) dayOption {
	return func(m *DayMutation) {
		var (
			err   error
			once  sync.Once
			value *Day
		)
		m.oldValue = func(ctx context.Context) (*Day, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Day.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDay sets the old Day of the mutation.
func withDay(node *Day) dayOption {
	return func(m *DayMutation) {
		m.oldValue = func(context.Context) (*Day, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DayMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DayMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Day.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDate sets the "date" field.
func (m *DayMutation) SetDate(t time.Time) {
	m.date = &t
}

// Date returns the value of the "date" field in the mutation.
func (m *DayMutation) Date() (r time.Time, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Day entity.
// If the Day object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DayMutation) OldDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ResetDate resets all changes to the "date" field.
func (m *DayMutation) ResetDate() {
	m.date = nil
}

// Where appends a list predicates to the DayMutation builder.
func (m *DayMutation) Where(ps ...predicate.Day) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *DayMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Day).
func (m *DayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DayMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.date != nil {
		fields = append(fields, day.FieldDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case day.FieldDate:
		return m.Date()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case day.FieldDate:
		return m.OldDate(ctx)
	}
	return nil, fmt.Errorf("unknown Day field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case day.FieldDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	}
	return fmt.Errorf("unknown Day field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DayMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DayMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DayMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Day numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DayMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DayMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Day nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DayMutation) ResetField(name string) error {
	switch name {
	case day.FieldDate:
		m.ResetDate()
		return nil
	}
	return fmt.Errorf("unknown Day field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DayMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DayMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DayMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DayMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DayMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Day unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DayMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Day edge %s", name)
}

// PlatformMutation represents an operation that mutates the Platform nodes in the graph.
type PlatformMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	clearedFields  map[string]struct{}
	station        *int
	clearedstation bool
	done           bool
	oldValue       func(context.Context) (*Platform, error)
	predicates     []predicate.Platform
}

var _ ent.Mutation = (*PlatformMutation)(nil)

// platformOption allows management of the mutation configuration using functional options.
type platformOption func(*PlatformMutation)

// newPlatformMutation creates new mutation for the Platform entity.
func newPlatformMutation(c config, op Op, opts ...platformOption) *PlatformMutation {
	m := &PlatformMutation{
		config:        c,
		op:            op,
		typ:           TypePlatform,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlatformID sets the ID field of the mutation.
func withPlatformID(id int) platformOption {
	return func(m *PlatformMutation) {
		var (
			err   error
			once  sync.Once
			value *Platform
		)
		m.oldValue = func(ctx context.Context) (*Platform, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Platform.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlatform sets the old Platform of the mutation.
func withPlatform(node *Platform) platformOption {
	return func(m *PlatformMutation) {
		m.oldValue = func(context.Context) (*Platform, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlatformMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlatformMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlatformMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlatformMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Platform.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlatformMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlatformMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Platform entity.
// If the Platform object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlatformMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlatformMutation) ResetName() {
	m.name = nil
}

// SetStationID sets the "station" edge to the Station entity by id.
func (m *PlatformMutation) SetStationID(id int) {
	m.station = &id
}

// ClearStation clears the "station" edge to the Station entity.
func (m *PlatformMutation) ClearStation() {
	m.clearedstation = true
}

// StationCleared reports if the "station" edge to the Station entity was cleared.
func (m *PlatformMutation) StationCleared() bool {
	return m.clearedstation
}

// StationID returns the "station" edge ID in the mutation.
func (m *PlatformMutation) StationID() (id int, exists bool) {
	if m.station != nil {
		return *m.station, true
	}
	return
}

// StationIDs returns the "station" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StationID instead. It exists only for internal usage by the builders.
func (m *PlatformMutation) StationIDs() (ids []int) {
	if id := m.station; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStation resets all changes to the "station" edge.
func (m *PlatformMutation) ResetStation() {
	m.station = nil
	m.clearedstation = false
}

// Where appends a list predicates to the PlatformMutation builder.
func (m *PlatformMutation) Where(ps ...predicate.Platform) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlatformMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Platform).
func (m *PlatformMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlatformMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, platform.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlatformMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case platform.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlatformMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case platform.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Platform field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformMutation) SetField(name string, value ent.Value) error {
	switch name {
	case platform.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Platform field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlatformMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlatformMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlatformMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Platform numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlatformMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlatformMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlatformMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Platform nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlatformMutation) ResetField(name string) error {
	switch name {
	case platform.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Platform field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlatformMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.station != nil {
		edges = append(edges, platform.EdgeStation)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlatformMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case platform.EdgeStation:
		if id := m.station; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlatformMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlatformMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlatformMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedstation {
		edges = append(edges, platform.EdgeStation)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlatformMutation) EdgeCleared(name string) bool {
	switch name {
	case platform.EdgeStation:
		return m.clearedstation
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlatformMutation) ClearEdge(name string) error {
	switch name {
	case platform.EdgeStation:
		m.ClearStation()
		return nil
	}
	return fmt.Errorf("unknown Platform unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlatformMutation) ResetEdge(name string) error {
	switch name {
	case platform.EdgeStation:
		m.ResetStation()
		return nil
	}
	return fmt.Errorf("unknown Platform edge %s", name)
}

// ServiceMutation represents an operation that mutates the Service nodes in the graph.
type ServiceMutation struct {
	config
	op            Op
	typ           string
	id            *int
	uid           *string
	headcode      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Service, error)
	predicates    []predicate.Service
}

var _ ent.Mutation = (*ServiceMutation)(nil)

// serviceOption allows management of the mutation configuration using functional options.
type serviceOption func(*ServiceMutation)

// newServiceMutation creates new mutation for the Service entity.
func newServiceMutation(c config, op Op, opts ...serviceOption) *ServiceMutation {
	m := &ServiceMutation{
		config:        c,
		op:            op,
		typ:           TypeService,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withServiceID sets the ID field of the mutation.
func withServiceID(id int) serviceOption {
	return func(m *ServiceMutation) {
		var (
			err   error
			once  sync.Once
			value *Service
		)
		m.oldValue = func(ctx context.Context) (*Service, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Service.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withService sets the old Service of the mutation.
func withService(node *Service) serviceOption {
	return func(m *ServiceMutation) {
		m.oldValue = func(context.Context) (*Service, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ServiceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ServiceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ServiceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ServiceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Service.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUID sets the "uid" field.
func (m *ServiceMutation) SetUID(s string) {
	m.uid = &s
}

// UID returns the value of the "uid" field in the mutation.
func (m *ServiceMutation) UID() (r string, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// ResetUID resets all changes to the "uid" field.
func (m *ServiceMutation) ResetUID() {
	m.uid = nil
}

// SetHeadcode sets the "headcode" field.
func (m *ServiceMutation) SetHeadcode(s string) {
	m.headcode = &s
}

// Headcode returns the value of the "headcode" field in the mutation.
func (m *ServiceMutation) Headcode() (r string, exists bool) {
	v := m.headcode
	if v == nil {
		return
	}
	return *v, true
}

// OldHeadcode returns the old "headcode" field's value of the Service entity.
// If the Service object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ServiceMutation) OldHeadcode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeadcode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeadcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeadcode: %w", err)
	}
	return oldValue.Headcode, nil
}

// ResetHeadcode resets all changes to the "headcode" field.
func (m *ServiceMutation) ResetHeadcode() {
	m.headcode = nil
}

// Where appends a list predicates to the ServiceMutation builder.
func (m *ServiceMutation) Where(ps ...predicate.Service) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ServiceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Service).
func (m *ServiceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ServiceMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.uid != nil {
		fields = append(fields, service.FieldUID)
	}
	if m.headcode != nil {
		fields = append(fields, service.FieldHeadcode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ServiceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case service.FieldUID:
		return m.UID()
	case service.FieldHeadcode:
		return m.Headcode()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ServiceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case service.FieldUID:
		return m.OldUID(ctx)
	case service.FieldHeadcode:
		return m.OldHeadcode(ctx)
	}
	return nil, fmt.Errorf("unknown Service field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case service.FieldUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case service.FieldHeadcode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeadcode(v)
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ServiceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ServiceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ServiceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Service numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ServiceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ServiceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ServiceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Service nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ServiceMutation) ResetField(name string) error {
	switch name {
	case service.FieldUID:
		m.ResetUID()
		return nil
	case service.FieldHeadcode:
		m.ResetHeadcode()
		return nil
	}
	return fmt.Errorf("unknown Service field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ServiceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ServiceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ServiceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ServiceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ServiceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ServiceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ServiceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Service unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ServiceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Service edge %s", name)
}

// StationMutation represents an operation that mutates the Station nodes in the graph.
type StationMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	crs              *string
	clearedFields    map[string]struct{}
	platforms        map[int]struct{}
	removedplatforms map[int]struct{}
	clearedplatforms bool
	done             bool
	oldValue         func(context.Context) (*Station, error)
	predicates       []predicate.Station
}

var _ ent.Mutation = (*StationMutation)(nil)

// stationOption allows management of the mutation configuration using functional options.
type stationOption func(*StationMutation)

// newStationMutation creates new mutation for the Station entity.
func newStationMutation(c config, op Op, opts ...stationOption) *StationMutation {
	m := &StationMutation{
		config:        c,
		op:            op,
		typ:           TypeStation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStationID sets the ID field of the mutation.
func withStationID(id int) stationOption {
	return func(m *StationMutation) {
		var (
			err   error
			once  sync.Once
			value *Station
		)
		m.oldValue = func(ctx context.Context) (*Station, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Station.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStation sets the old Station of the mutation.
func withStation(node *Station) stationOption {
	return func(m *StationMutation) {
		m.oldValue = func(context.Context) (*Station, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Station.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *StationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StationMutation) ResetName() {
	m.name = nil
}

// SetCrs sets the "crs" field.
func (m *StationMutation) SetCrs(s string) {
	m.crs = &s
}

// Crs returns the value of the "crs" field in the mutation.
func (m *StationMutation) Crs() (r string, exists bool) {
	v := m.crs
	if v == nil {
		return
	}
	return *v, true
}

// OldCrs returns the old "crs" field's value of the Station entity.
// If the Station object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StationMutation) OldCrs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrs: %w", err)
	}
	return oldValue.Crs, nil
}

// ResetCrs resets all changes to the "crs" field.
func (m *StationMutation) ResetCrs() {
	m.crs = nil
}

// AddPlatformIDs adds the "platforms" edge to the Platform entity by ids.
func (m *StationMutation) AddPlatformIDs(ids ...int) {
	if m.platforms == nil {
		m.platforms = make(map[int]struct{})
	}
	for i := range ids {
		m.platforms[ids[i]] = struct{}{}
	}
}

// ClearPlatforms clears the "platforms" edge to the Platform entity.
func (m *StationMutation) ClearPlatforms() {
	m.clearedplatforms = true
}

// PlatformsCleared reports if the "platforms" edge to the Platform entity was cleared.
func (m *StationMutation) PlatformsCleared() bool {
	return m.clearedplatforms
}

// RemovePlatformIDs removes the "platforms" edge to the Platform entity by IDs.
func (m *StationMutation) RemovePlatformIDs(ids ...int) {
	if m.removedplatforms == nil {
		m.removedplatforms = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.platforms, ids[i])
		m.removedplatforms[ids[i]] = struct{}{}
	}
}

// RemovedPlatforms returns the removed IDs of the "platforms" edge to the Platform entity.
func (m *StationMutation) RemovedPlatformsIDs() (ids []int) {
	for id := range m.removedplatforms {
		ids = append(ids, id)
	}
	return
}

// PlatformsIDs returns the "platforms" edge IDs in the mutation.
func (m *StationMutation) PlatformsIDs() (ids []int) {
	for id := range m.platforms {
		ids = append(ids, id)
	}
	return
}

// ResetPlatforms resets all changes to the "platforms" edge.
func (m *StationMutation) ResetPlatforms() {
	m.platforms = nil
	m.clearedplatforms = false
	m.removedplatforms = nil
}

// Where appends a list predicates to the StationMutation builder.
func (m *StationMutation) Where(ps ...predicate.Station) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Station).
func (m *StationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StationMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, station.FieldName)
	}
	if m.crs != nil {
		fields = append(fields, station.FieldCrs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case station.FieldName:
		return m.Name()
	case station.FieldCrs:
		return m.Crs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case station.FieldName:
		return m.OldName(ctx)
	case station.FieldCrs:
		return m.OldCrs(ctx)
	}
	return nil, fmt.Errorf("unknown Station field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case station.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case station.FieldCrs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrs(v)
		return nil
	}
	return fmt.Errorf("unknown Station field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Station numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Station nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StationMutation) ResetField(name string) error {
	switch name {
	case station.FieldName:
		m.ResetName()
		return nil
	case station.FieldCrs:
		m.ResetCrs()
		return nil
	}
	return fmt.Errorf("unknown Station field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.platforms != nil {
		edges = append(edges, station.EdgePlatforms)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case station.EdgePlatforms:
		ids := make([]ent.Value, 0, len(m.platforms))
		for id := range m.platforms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplatforms != nil {
		edges = append(edges, station.EdgePlatforms)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case station.EdgePlatforms:
		ids := make([]ent.Value, 0, len(m.removedplatforms))
		for id := range m.removedplatforms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplatforms {
		edges = append(edges, station.EdgePlatforms)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StationMutation) EdgeCleared(name string) bool {
	switch name {
	case station.EdgePlatforms:
		return m.clearedplatforms
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Station unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StationMutation) ResetEdge(name string) error {
	switch name {
	case station.EdgePlatforms:
		m.ResetPlatforms()
		return nil
	}
	return fmt.Errorf("unknown Station edge %s", name)
}

// TOCMutation represents an operation that mutates the TOC nodes in the graph.
type TOCMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*TOC, error)
	predicates    []predicate.TOC
}

var _ ent.Mutation = (*TOCMutation)(nil)

// tocOption allows management of the mutation configuration using functional options.
type tocOption func(*TOCMutation)

// newTOCMutation creates new mutation for the TOC entity.
func newTOCMutation(c config, op Op, opts ...tocOption) *TOCMutation {
	m := &TOCMutation{
		config:        c,
		op:            op,
		typ:           TypeTOC,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTOCID sets the ID field of the mutation.
func withTOCID(id int) tocOption {
	return func(m *TOCMutation) {
		var (
			err   error
			once  sync.Once
			value *TOC
		)
		m.oldValue = func(ctx context.Context) (*TOC, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TOC.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTOC sets the old TOC of the mutation.
func withTOC(node *TOC) tocOption {
	return func(m *TOCMutation) {
		m.oldValue = func(context.Context) (*TOC, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TOCMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TOCMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entities: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TOCMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TOCMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TOC.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TOCMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TOCMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the TOC entity.
// If the TOC object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TOCMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TOCMutation) ResetName() {
	m.name = nil
}

// Where appends a list predicates to the TOCMutation builder.
func (m *TOCMutation) Where(ps ...predicate.TOC) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TOCMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (TOC).
func (m *TOCMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TOCMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, toc.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TOCMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case toc.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TOCMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case toc.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown TOC field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TOCMutation) SetField(name string, value ent.Value) error {
	switch name {
	case toc.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown TOC field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TOCMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TOCMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TOCMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TOC numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TOCMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TOCMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TOCMutation) ClearField(name string) error {
	return fmt.Errorf("unknown TOC nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TOCMutation) ResetField(name string) error {
	switch name {
	case toc.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown TOC field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TOCMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TOCMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TOCMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TOCMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TOCMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TOCMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TOCMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown TOC unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TOCMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown TOC edge %s", name)
}
