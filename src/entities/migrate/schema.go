// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CallingPointsColumns holds the columns for the "calling_points" table.
	CallingPointsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "arrival_time", Type: field.TypeTime},
		{Name: "departure_time", Type: field.TypeTime},
		{Name: "platform_calling_points", Type: field.TypeInt, Nullable: true},
		{Name: "service_calling_points", Type: field.TypeInt, Nullable: true},
	}
	// CallingPointsTable holds the schema information for the "calling_points" table.
	CallingPointsTable = &schema.Table{
		Name:       "calling_points",
		Columns:    CallingPointsColumns,
		PrimaryKey: []*schema.Column{CallingPointsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "calling_points_platforms_calling_points",
				Columns:    []*schema.Column{CallingPointsColumns[3]},
				RefColumns: []*schema.Column{PlatformsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "calling_points_services_calling_points",
				Columns:    []*schema.Column{CallingPointsColumns[4]},
				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DaysColumns holds the columns for the "days" table.
	DaysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "date", Type: field.TypeTime},
	}
	// DaysTable holds the schema information for the "days" table.
	DaysTable = &schema.Table{
		Name:       "days",
		Columns:    DaysColumns,
		PrimaryKey: []*schema.Column{DaysColumns[0]},
	}
	// PlatformsColumns holds the columns for the "platforms" table.
	PlatformsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "-"},
		{Name: "station_platforms", Type: field.TypeInt, Nullable: true},
	}
	// PlatformsTable holds the schema information for the "platforms" table.
	PlatformsTable = &schema.Table{
		Name:       "platforms",
		Columns:    PlatformsColumns,
		PrimaryKey: []*schema.Column{PlatformsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "platforms_stations_platforms",
				Columns:    []*schema.Column{PlatformsColumns[2]},
				RefColumns: []*schema.Column{StationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeString, Default: "00000"},
		{Name: "headcode", Type: field.TypeString, Default: "0Z00"},
		{Name: "day_services", Type: field.TypeInt, Nullable: true},
		{Name: "toc_services", Type: field.TypeInt, Nullable: true},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:       "services",
		Columns:    ServicesColumns,
		PrimaryKey: []*schema.Column{ServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "services_days_services",
				Columns:    []*schema.Column{ServicesColumns[3]},
				RefColumns: []*schema.Column{DaysColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "services_to_cs_services",
				Columns:    []*schema.Column{ServicesColumns[4]},
				RefColumns: []*schema.Column{ToCsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// StationsColumns holds the columns for the "stations" table.
	StationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "???"},
		{Name: "crs", Type: field.TypeString, Default: "ZZZ"},
	}
	// StationsTable holds the schema information for the "stations" table.
	StationsTable = &schema.Table{
		Name:       "stations",
		Columns:    StationsColumns,
		PrimaryKey: []*schema.Column{StationsColumns[0]},
	}
	// ToCsColumns holds the columns for the "to_cs" table.
	ToCsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "???"},
	}
	// ToCsTable holds the schema information for the "to_cs" table.
	ToCsTable = &schema.Table{
		Name:       "to_cs",
		Columns:    ToCsColumns,
		PrimaryKey: []*schema.Column{ToCsColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CallingPointsTable,
		DaysTable,
		PlatformsTable,
		ServicesTable,
		StationsTable,
		ToCsTable,
	}
)

func init() {
	CallingPointsTable.ForeignKeys[0].RefTable = PlatformsTable
	CallingPointsTable.ForeignKeys[1].RefTable = ServicesTable
	PlatformsTable.ForeignKeys[0].RefTable = StationsTable
	ServicesTable.ForeignKeys[0].RefTable = DaysTable
	ServicesTable.ForeignKeys[1].RefTable = ToCsTable
}
