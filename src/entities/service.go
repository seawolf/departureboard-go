// Code generated by entc, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/day"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/service"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/toc"
	"entgo.io/ent/dialect/sql"
)

// Service is the model entity for the Service schema.
type Service struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Headcode holds the value of the "headcode" field.
	Headcode string `json:"headcode,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ServiceQuery when eager-loading is set.
	Edges        ServiceEdges `json:"edges"`
	day_services *int
	toc_services *int
}

// ServiceEdges holds the relations/edges for other nodes in the graph.
type ServiceEdges struct {
	// Toc holds the value of the toc edge.
	Toc *TOC `json:"toc,omitempty"`
	// Day holds the value of the day edge.
	Day *Day `json:"day,omitempty"`
	// CallingPoints holds the value of the calling_points edge.
	CallingPoints []*CallingPoint `json:"calling_points,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TocOrErr returns the Toc value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) TocOrErr() (*TOC, error) {
	if e.loadedTypes[0] {
		if e.Toc == nil {
			// The edge toc was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: toc.Label}
		}
		return e.Toc, nil
	}
	return nil, &NotLoadedError{edge: "toc"}
}

// DayOrErr returns the Day value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ServiceEdges) DayOrErr() (*Day, error) {
	if e.loadedTypes[1] {
		if e.Day == nil {
			// The edge day was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: day.Label}
		}
		return e.Day, nil
	}
	return nil, &NotLoadedError{edge: "day"}
}

// CallingPointsOrErr returns the CallingPoints value or an error if the edge
// was not loaded in eager-loading.
func (e ServiceEdges) CallingPointsOrErr() ([]*CallingPoint, error) {
	if e.loadedTypes[2] {
		return e.CallingPoints, nil
	}
	return nil, &NotLoadedError{edge: "calling_points"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Service) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			values[i] = new(sql.NullInt64)
		case service.FieldUID, service.FieldHeadcode:
			values[i] = new(sql.NullString)
		case service.ForeignKeys[0]: // day_services
			values[i] = new(sql.NullInt64)
		case service.ForeignKeys[1]: // toc_services
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Service", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Service fields.
func (s *Service) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case service.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case service.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				s.UID = value.String
			}
		case service.FieldHeadcode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field headcode", values[i])
			} else if value.Valid {
				s.Headcode = value.String
			}
		case service.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field day_services", value)
			} else if value.Valid {
				s.day_services = new(int)
				*s.day_services = int(value.Int64)
			}
		case service.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field toc_services", value)
			} else if value.Valid {
				s.toc_services = new(int)
				*s.toc_services = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryToc queries the "toc" edge of the Service entity.
func (s *Service) QueryToc() *TOCQuery {
	return (&ServiceClient{config: s.config}).QueryToc(s)
}

// QueryDay queries the "day" edge of the Service entity.
func (s *Service) QueryDay() *DayQuery {
	return (&ServiceClient{config: s.config}).QueryDay(s)
}

// QueryCallingPoints queries the "calling_points" edge of the Service entity.
func (s *Service) QueryCallingPoints() *CallingPointQuery {
	return (&ServiceClient{config: s.config}).QueryCallingPoints(s)
}

// Update returns a builder for updating this Service.
// Note that you need to call Service.Unwrap() before calling this method if this Service
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Service) Update() *ServiceUpdateOne {
	return (&ServiceClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Service entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Service) Unwrap() *Service {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("entities: Service is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Service) String() string {
	var builder strings.Builder
	builder.WriteString("Service(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", uid=")
	builder.WriteString(s.UID)
	builder.WriteString(", headcode=")
	builder.WriteString(s.Headcode)
	builder.WriteByte(')')
	return builder.String()
}

// Services is a parsable slice of Service.
type Services []*Service

func (s Services) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
