// Code generated by entc, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"
	"time"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/callingpoint"
	"entgo.io/ent/dialect/sql"
)

// CallingPoint is the model entity for the CallingPoint schema.
type CallingPoint struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ArrivalTime holds the value of the "arrival_time" field.
	ArrivalTime time.Time `json:"arrival_time,omitempty"`
	// DepartureTime holds the value of the "departure_time" field.
	DepartureTime time.Time `json:"departure_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CallingPoint) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case callingpoint.FieldID:
			values[i] = new(sql.NullInt64)
		case callingpoint.FieldArrivalTime, callingpoint.FieldDepartureTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CallingPoint", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CallingPoint fields.
func (cp *CallingPoint) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case callingpoint.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case callingpoint.FieldArrivalTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field arrival_time", values[i])
			} else if value.Valid {
				cp.ArrivalTime = value.Time
			}
		case callingpoint.FieldDepartureTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field departure_time", values[i])
			} else if value.Valid {
				cp.DepartureTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CallingPoint.
// Note that you need to call CallingPoint.Unwrap() before calling this method if this CallingPoint
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CallingPoint) Update() *CallingPointUpdateOne {
	return (&CallingPointClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CallingPoint entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CallingPoint) Unwrap() *CallingPoint {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("entities: CallingPoint is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CallingPoint) String() string {
	var builder strings.Builder
	builder.WriteString("CallingPoint(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", arrival_time=")
	builder.WriteString(cp.ArrivalTime.Format(time.ANSIC))
	builder.WriteString(", departure_time=")
	builder.WriteString(cp.DepartureTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CallingPoints is a parsable slice of CallingPoint.
type CallingPoints []*CallingPoint

func (cp CallingPoints) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
