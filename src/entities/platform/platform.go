// Code generated by entc, DO NOT EDIT.

package platform

const (
	// Label holds the string label denoting the platform type in the database.
	Label = "platform"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeStation holds the string denoting the station edge name in mutations.
	EdgeStation = "station"
	// EdgeCallingPoints holds the string denoting the calling_points edge name in mutations.
	EdgeCallingPoints = "calling_points"
	// Table holds the table name of the platform in the database.
	Table = "platforms"
	// StationTable is the table that holds the station relation/edge.
	StationTable = "platforms"
	// StationInverseTable is the table name for the Station entity.
	// It exists in this package in order to avoid circular dependency with the "station" package.
	StationInverseTable = "stations"
	// StationColumn is the table column denoting the station relation/edge.
	StationColumn = "station_platforms"
	// CallingPointsTable is the table that holds the calling_points relation/edge.
	CallingPointsTable = "calling_points"
	// CallingPointsInverseTable is the table name for the CallingPoint entity.
	// It exists in this package in order to avoid circular dependency with the "callingpoint" package.
	CallingPointsInverseTable = "calling_points"
	// CallingPointsColumn is the table column denoting the calling_points relation/edge.
	CallingPointsColumn = "platform_calling_points"
)

// Columns holds all SQL columns for platform fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "platforms"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"station_platforms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)
