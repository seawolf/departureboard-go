// Code generated by entc, DO NOT EDIT.

package entities

import (
	"context"
	"errors"
	"fmt"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/callingpoint"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/day"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/predicate"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/service"
	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/toc"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServiceUpdate is the builder for updating Service entities.
type ServiceUpdate struct {
	config
	hooks    []Hook
	mutation *ServiceMutation
}

// Where appends a list predicates to the ServiceUpdate builder.
func (su *ServiceUpdate) Where(ps ...predicate.Service) *ServiceUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUID sets the "uid" field.
func (su *ServiceUpdate) SetUID(s string) *ServiceUpdate {
	su.mutation.SetUID(s)
	return su
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableUID(s *string) *ServiceUpdate {
	if s != nil {
		su.SetUID(*s)
	}
	return su
}

// SetHeadcode sets the "headcode" field.
func (su *ServiceUpdate) SetHeadcode(s string) *ServiceUpdate {
	su.mutation.SetHeadcode(s)
	return su
}

// SetNillableHeadcode sets the "headcode" field if the given value is not nil.
func (su *ServiceUpdate) SetNillableHeadcode(s *string) *ServiceUpdate {
	if s != nil {
		su.SetHeadcode(*s)
	}
	return su
}

// SetTocID sets the "toc" edge to the TOC entity by ID.
func (su *ServiceUpdate) SetTocID(id int) *ServiceUpdate {
	su.mutation.SetTocID(id)
	return su
}

// SetNillableTocID sets the "toc" edge to the TOC entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableTocID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetTocID(*id)
	}
	return su
}

// SetToc sets the "toc" edge to the TOC entity.
func (su *ServiceUpdate) SetToc(t *TOC) *ServiceUpdate {
	return su.SetTocID(t.ID)
}

// SetDayID sets the "day" edge to the Day entity by ID.
func (su *ServiceUpdate) SetDayID(id int) *ServiceUpdate {
	su.mutation.SetDayID(id)
	return su
}

// SetNillableDayID sets the "day" edge to the Day entity by ID if the given value is not nil.
func (su *ServiceUpdate) SetNillableDayID(id *int) *ServiceUpdate {
	if id != nil {
		su = su.SetDayID(*id)
	}
	return su
}

// SetDay sets the "day" edge to the Day entity.
func (su *ServiceUpdate) SetDay(d *Day) *ServiceUpdate {
	return su.SetDayID(d.ID)
}

// AddCallingPointIDs adds the "calling_points" edge to the CallingPoint entity by IDs.
func (su *ServiceUpdate) AddCallingPointIDs(ids ...int) *ServiceUpdate {
	su.mutation.AddCallingPointIDs(ids...)
	return su
}

// AddCallingPoints adds the "calling_points" edges to the CallingPoint entity.
func (su *ServiceUpdate) AddCallingPoints(c ...*CallingPoint) *ServiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCallingPointIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (su *ServiceUpdate) Mutation() *ServiceMutation {
	return su.mutation
}

// ClearToc clears the "toc" edge to the TOC entity.
func (su *ServiceUpdate) ClearToc() *ServiceUpdate {
	su.mutation.ClearToc()
	return su
}

// ClearDay clears the "day" edge to the Day entity.
func (su *ServiceUpdate) ClearDay() *ServiceUpdate {
	su.mutation.ClearDay()
	return su
}

// ClearCallingPoints clears all "calling_points" edges to the CallingPoint entity.
func (su *ServiceUpdate) ClearCallingPoints() *ServiceUpdate {
	su.mutation.ClearCallingPoints()
	return su
}

// RemoveCallingPointIDs removes the "calling_points" edge to CallingPoint entities by IDs.
func (su *ServiceUpdate) RemoveCallingPointIDs(ids ...int) *ServiceUpdate {
	su.mutation.RemoveCallingPointIDs(ids...)
	return su
}

// RemoveCallingPoints removes "calling_points" edges to CallingPoint entities.
func (su *ServiceUpdate) RemoveCallingPoints(c ...*CallingPoint) *ServiceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCallingPointIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServiceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServiceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServiceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServiceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ServiceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldUID,
		})
	}
	if value, ok := su.mutation.Headcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldHeadcode,
		})
	}
	if su.mutation.TocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.TocTable,
			Columns: []string{service.TocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: toc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.TocTable,
			Columns: []string{service.TocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: toc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.DayTable,
			Columns: []string{service.DayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: day.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.DayTable,
			Columns: []string{service.DayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: day.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.CallingPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCallingPointsIDs(); len(nodes) > 0 && !su.mutation.CallingPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CallingPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServiceUpdateOne is the builder for updating a single Service entity.
type ServiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServiceMutation
}

// SetUID sets the "uid" field.
func (suo *ServiceUpdateOne) SetUID(s string) *ServiceUpdateOne {
	suo.mutation.SetUID(s)
	return suo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableUID(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetUID(*s)
	}
	return suo
}

// SetHeadcode sets the "headcode" field.
func (suo *ServiceUpdateOne) SetHeadcode(s string) *ServiceUpdateOne {
	suo.mutation.SetHeadcode(s)
	return suo
}

// SetNillableHeadcode sets the "headcode" field if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableHeadcode(s *string) *ServiceUpdateOne {
	if s != nil {
		suo.SetHeadcode(*s)
	}
	return suo
}

// SetTocID sets the "toc" edge to the TOC entity by ID.
func (suo *ServiceUpdateOne) SetTocID(id int) *ServiceUpdateOne {
	suo.mutation.SetTocID(id)
	return suo
}

// SetNillableTocID sets the "toc" edge to the TOC entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableTocID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetTocID(*id)
	}
	return suo
}

// SetToc sets the "toc" edge to the TOC entity.
func (suo *ServiceUpdateOne) SetToc(t *TOC) *ServiceUpdateOne {
	return suo.SetTocID(t.ID)
}

// SetDayID sets the "day" edge to the Day entity by ID.
func (suo *ServiceUpdateOne) SetDayID(id int) *ServiceUpdateOne {
	suo.mutation.SetDayID(id)
	return suo
}

// SetNillableDayID sets the "day" edge to the Day entity by ID if the given value is not nil.
func (suo *ServiceUpdateOne) SetNillableDayID(id *int) *ServiceUpdateOne {
	if id != nil {
		suo = suo.SetDayID(*id)
	}
	return suo
}

// SetDay sets the "day" edge to the Day entity.
func (suo *ServiceUpdateOne) SetDay(d *Day) *ServiceUpdateOne {
	return suo.SetDayID(d.ID)
}

// AddCallingPointIDs adds the "calling_points" edge to the CallingPoint entity by IDs.
func (suo *ServiceUpdateOne) AddCallingPointIDs(ids ...int) *ServiceUpdateOne {
	suo.mutation.AddCallingPointIDs(ids...)
	return suo
}

// AddCallingPoints adds the "calling_points" edges to the CallingPoint entity.
func (suo *ServiceUpdateOne) AddCallingPoints(c ...*CallingPoint) *ServiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCallingPointIDs(ids...)
}

// Mutation returns the ServiceMutation object of the builder.
func (suo *ServiceUpdateOne) Mutation() *ServiceMutation {
	return suo.mutation
}

// ClearToc clears the "toc" edge to the TOC entity.
func (suo *ServiceUpdateOne) ClearToc() *ServiceUpdateOne {
	suo.mutation.ClearToc()
	return suo
}

// ClearDay clears the "day" edge to the Day entity.
func (suo *ServiceUpdateOne) ClearDay() *ServiceUpdateOne {
	suo.mutation.ClearDay()
	return suo
}

// ClearCallingPoints clears all "calling_points" edges to the CallingPoint entity.
func (suo *ServiceUpdateOne) ClearCallingPoints() *ServiceUpdateOne {
	suo.mutation.ClearCallingPoints()
	return suo
}

// RemoveCallingPointIDs removes the "calling_points" edge to CallingPoint entities by IDs.
func (suo *ServiceUpdateOne) RemoveCallingPointIDs(ids ...int) *ServiceUpdateOne {
	suo.mutation.RemoveCallingPointIDs(ids...)
	return suo
}

// RemoveCallingPoints removes "calling_points" edges to CallingPoint entities.
func (suo *ServiceUpdateOne) RemoveCallingPoints(c ...*CallingPoint) *ServiceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCallingPointIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServiceUpdateOne) Select(field string, fields ...string) *ServiceUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Service entity.
func (suo *ServiceUpdateOne) Save(ctx context.Context) (*Service, error) {
	var (
		err  error
		node *Service
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServiceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("entities: uninitialized hook (forgotten import entities/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServiceUpdateOne) SaveX(ctx context.Context) *Service {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServiceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServiceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ServiceUpdateOne) sqlSave(ctx context.Context) (_node *Service, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   service.Table,
			Columns: service.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: service.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entities: missing "Service.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, service.FieldID)
		for _, f := range fields {
			if !service.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entities: invalid field %q for query", f)}
			}
			if f != service.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldUID,
		})
	}
	if value, ok := suo.mutation.Headcode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: service.FieldHeadcode,
		})
	}
	if suo.mutation.TocCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.TocTable,
			Columns: []string{service.TocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: toc.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TocIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.TocTable,
			Columns: []string{service.TocColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: toc.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DayCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.DayTable,
			Columns: []string{service.DayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: day.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DayIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   service.DayTable,
			Columns: []string{service.DayColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: day.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.CallingPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCallingPointsIDs(); len(nodes) > 0 && !suo.mutation.CallingPointsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CallingPointsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   service.CallingPointsTable,
			Columns: []string{service.CallingPointsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: callingpoint.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Service{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{service.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
