// Code generated by entc, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/station"
	"entgo.io/ent/dialect/sql"
)

// Station is the model entity for the Station schema.
type Station struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Crs holds the value of the "crs" field.
	Crs string `json:"crs,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StationQuery when eager-loading is set.
	Edges StationEdges `json:"edges"`
}

// StationEdges holds the relations/edges for other nodes in the graph.
type StationEdges struct {
	// Platforms holds the value of the platforms edge.
	Platforms []*Platform `json:"platforms,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlatformsOrErr returns the Platforms value or an error if the edge
// was not loaded in eager-loading.
func (e StationEdges) PlatformsOrErr() ([]*Platform, error) {
	if e.loadedTypes[0] {
		return e.Platforms, nil
	}
	return nil, &NotLoadedError{edge: "platforms"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Station) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case station.FieldID:
			values[i] = new(sql.NullInt64)
		case station.FieldName, station.FieldCrs:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Station", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Station fields.
func (s *Station) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case station.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case station.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case station.FieldCrs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field crs", values[i])
			} else if value.Valid {
				s.Crs = value.String
			}
		}
	}
	return nil
}

// QueryPlatforms queries the "platforms" edge of the Station entity.
func (s *Station) QueryPlatforms() *PlatformQuery {
	return (&StationClient{config: s.config}).QueryPlatforms(s)
}

// Update returns a builder for updating this Station.
// Note that you need to call Station.Unwrap() before calling this method if this Station
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Station) Update() *StationUpdateOne {
	return (&StationClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Station entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Station) Unwrap() *Station {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("entities: Station is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Station) String() string {
	var builder strings.Builder
	builder.WriteString("Station(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", crs=")
	builder.WriteString(s.Crs)
	builder.WriteByte(')')
	return builder.String()
}

// Stations is a parsable slice of Station.
type Stations []*Station

func (s Stations) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
