// Code generated by entc, DO NOT EDIT.

package entities

import (
	"fmt"
	"strings"

	"bitbucket.org/sea_wolf/departure_board-go/v2/entities/toc"
	"entgo.io/ent/dialect/sql"
)

// TOC is the model entity for the TOC schema.
type TOC struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TOCQuery when eager-loading is set.
	Edges TOCEdges `json:"edges"`
}

// TOCEdges holds the relations/edges for other nodes in the graph.
type TOCEdges struct {
	// Services holds the value of the services edge.
	Services []*Service `json:"services,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ServicesOrErr returns the Services value or an error if the edge
// was not loaded in eager-loading.
func (e TOCEdges) ServicesOrErr() ([]*Service, error) {
	if e.loadedTypes[0] {
		return e.Services, nil
	}
	return nil, &NotLoadedError{edge: "services"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TOC) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case toc.FieldID:
			values[i] = new(sql.NullInt64)
		case toc.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TOC", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TOC fields.
func (t *TOC) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case toc.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case toc.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		}
	}
	return nil
}

// QueryServices queries the "services" edge of the TOC entity.
func (t *TOC) QueryServices() *ServiceQuery {
	return (&TOCClient{config: t.config}).QueryServices(t)
}

// Update returns a builder for updating this TOC.
// Note that you need to call TOC.Unwrap() before calling this method if this TOC
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *TOC) Update() *TOCUpdateOne {
	return (&TOCClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the TOC entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *TOC) Unwrap() *TOC {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("entities: TOC is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *TOC) String() string {
	var builder strings.Builder
	builder.WriteString("TOC(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// TOCs is a parsable slice of TOC.
type TOCs []*TOC

func (t TOCs) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
